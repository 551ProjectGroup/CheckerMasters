#include "guipiece.h"
#include "piece.h"
#include <QGraphicsSceneMouseEvent>
#include "userinput.h"
#include "turn.h"
#include <QMessageBox>

int guiPiece::getBoardX() const
{
    return boardX;
}

void guiPiece::setBoardX(int value)
{
    boardX = value;
}

int guiPiece::getBoardY() const
{
    return boardY;
}

void guiPiece::setBoardY(int value)
{
    boardY = value;
}

int guiPiece::getPiececolor() const
{
    return piececolor;
}

void guiPiece::setPiececolor(int value)
{
    piececolor = value;
}

void guiPiece::mousePressEvent(QGraphicsSceneMouseEvent *event)
{
        Pressed = true;
        update();
        QPointF point = event->scenePos();
        uin.setCurrentPosition(point);
        QGraphicsItem::mousePressEvent(event);
}

void guiPiece::mouseReleaseEvent(QGraphicsSceneMouseEvent *event)
{
    Pressed = false;
    update();
    QPointF point = event->scenePos();
    uin.setNextPosition(point);
    QGraphicsItem::mouseReleaseEvent(event);
    bool userWin = false;
    bool compWin = false;
    if(trueState->getTurn() == 0){
       trueState = userTurn(trueState, uin);
       userWin = trueState->winLoss();
       if (userWin == true){
           window->updateGame(trueState);
           QMessageBox::information(NULL,"WIN","You Win!");
           trueState->emptyBoard();
       }
    }
    if(trueState->getTurn() == 1 && userWin == false){
        trueState = computerTurn(trueState, window->getDifficulty());
        compWin = trueState->winLoss();
        if (compWin == true){
            window->updateGame(trueState);
            QMessageBox::information(NULL,"LOSS","You Lost");
            trueState->emptyBoard();
        }
    }

    window->updateGame(trueState);
}

bool guiPiece::getMoved() const
{
    return moved;
}

void guiPiece::setMoved(bool value)
{
    moved = value;
}

UserInput guiPiece::getUin() const
{
    return uin;
}

void guiPiece::setUin(const UserInput &value)
{
    uin = value;
}

int guiPiece::getType() const
{
    return type;
}

void guiPiece::setType(int value)
{
    type = value;
}
QRectF guiPiece::boundingRect() const
{
    return QRectF(((getBoardX()*100)+25),((getBoardY()*100)+25),50,50);
}

void guiPiece::paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget)
{
    QRectF rec=boundingRect();
    QBrush brushRed(Qt::red);
    QBrush brushBlack(Qt::black);
    QBrush brushBlue(Qt::blue);
    QBrush brushGreen(Qt::green);

    if(getPiececolor() && !getType()) {
    painter->setBrush(brushRed);
    painter->drawEllipse(rec);
    }
    else if(!getPiececolor() && !getType()){
        painter->setBrush(brushBlack);
        painter->drawEllipse(rec);
    }
    else if(getPiececolor() && getType()) {
        painter->setBrush(brushBlue);
        painter->drawEllipse(rec);
    }
    else if(!getPiececolor() && getType()) {
        painter->setBrush(brushGreen);
        painter->drawEllipse(rec);
    }
}

guiPiece::guiPiece()
{
    setFlags(ItemIsMovable);
}
