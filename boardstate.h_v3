class BoardState{
 private:
  Piece board[8][8];
  int userColor; // 1-> red, 0 -> black
  int compColor;
  int turn; //0 <- user, 1 <- computer
  int startOfUserTurn; // 0 <- start of user turn, 1 <- user has further moves
  int lastX; //gives the coordinate of the last piece that moved
  int lastY; //gives the coordinate of the last piece that moved
 public:
  BoardState(int color);
  bool checkLegality(UserInput& input);
  bool checkLegalJump(UserInput & input);
  bool checkNoJumps();
  bool checkRegMove(UserInput & input);
  int getTurn();
  int getLastX();
  int getLastY();
  int getCompColor();
  int getStartOfUserTurn();
  void updateBoard(UserInput & input);
  bool checkFurther(UserInput & input);
  Piece getPiece(int x, int y);
  void changeTurn();
  void changeStep(int change, int x, int y);
  void PossibleMoves(allMoves * comp, int checkPiece);
  UserInput * comMoreMove(Coor start);
  void emptyBoard();
  bool winLoss();
};

#endif // BOARDSTATE_H
